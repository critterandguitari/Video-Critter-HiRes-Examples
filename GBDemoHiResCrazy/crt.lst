ARM GAS  crt.s 			page 1


   1              	/* ex6_start.s */
   2              	
   3              	    .global main
   4              	    .global _start
   5              		
   6              	    /* Symbols defined by the linker script */
   7              	    .global _etext
   8              	    .global _data
   9              	    .global _edata
  10              	    .global _bss
  11              	    .global _ebss
  12              	    
  13              	    /* External functions */
  14              	    .global fiq_handler
  15              	
  16              	    .text
  17              	    .arm
  18              	
  19              	/* ----------------------------------------------------------------
  20              	 * Exception vectors
  21              	 * ----------------------------------------------------------------
  22              	 */
  23              	_start:
  24 0000 070000EA 	    b reset  /* reset */
  25 0004 3C0000EA 	    b loop   /* undefined instruction */
  26 0008 3C0000EA 	    b loop   /* software interrupt */
  27 000c 3C0000EA 	    b loop   /* prefetch abort */
  28 0010 3C0000EA 	    b loop   /* data abort */
  29 0014 0000A0E1 	    nop      /* reserved for the bootloader checksum */
  30 0018 F0FF1FE5 	    ldr pc, [pc, #-0x0FF0]     /* VicVectAddr */
  31 001c 04F01FE5 	    ldr pc, fiq_addr
  32              	
  33              	    /* Address of the handler function */
  34 0020 00000000 	fiq_addr: .word fiq_handler
  35              	
  36              	/* ----------------------------------------------------------------
  37              	 * LPC21xx PLL setup
  38              	 * ----------------------------------------------------------------
  39              	 */
  40              	reset:
  41              	    /* Use r0 for indirect addressing */
  42 0024 D4009FE5 	    ldr	r0, PLLBASE
  43              	
  44              	    /* PLLCFG = PLLCFG_VALUE */
  45 0028 2430A0E3 	    mov	r3, #PLLCFG_VALUE
  46 002c 043080E5 	    str r3, [r0, #PLLCFG_OFFSET]
  47              	
  48              	    /* PLLCON = PLLCON_PLLE */
  49 0030 0130A0E3 	    mov	r3, #PLLCON_PLLE
  50 0034 003080E5 	    str r3, [r0, #PLLCON_OFFSET]
  51              	
  52              	    /* PLLFEED = PLLFEED1, PLLFEED2 */
  53 0038 AA10A0E3 	    mov	r1, #PLLFEED1
  54 003c 5520A0E3 	    mov	r2, #PLLFEED2
  55 0040 0C1080E5 	    str r1, [r0, #PLLFEED_OFFSET]
  56 0044 0C2080E5 	    str r2, [r0, #PLLFEED_OFFSET]
  57              	
ARM GAS  crt.s 			page 2


  58              	    /* 	while ((PLLSTAT & PLLSTAT_PLOCK) == 0); */
  59              	pll_loop:
  60 0048 083090E5 	    ldr r3, [r0, #PLLSTAT_OFFSET]
  61 004c 010B13E3 	    tst	r3, #PLLSTAT_PLOCK
  62 0050 1000000A 	    beq	pll_loop
  63              	
  64              	    /* PLLCON = PLLCON_PLLC|PLLCON_PLLE */
  65 0054 0330A0E3 	    mov	r3, #PLLCON_PLLC|PLLCON_PLLE
  66 0058 003080E5 	    str r3, [r0, #PLLCON_OFFSET]
  67              	
  68              	    /* PLLFEED = PLLFEED1, PLLFEED2 */
  69 005c 0C1080E5 	    str r1, [r0, #PLLFEED_OFFSET]
  70 0060 0C2080E5 	    str r2, [r0, #PLLFEED_OFFSET]
  71              	
  72              	/* ----------------------------------------------------------------
  73              	 * LPC21xx MAM setup
  74              	 * ----------------------------------------------------------------
  75              	 */
  76              	mam_init:
  77              	    /* Use r0 for indirect addressing */
  78 0064 98009FE5 	    ldr	r0, MAMBASE
  79              	
  80              	    /* MAMCR = MAMCR_VALUE */
  81 0068 0210A0E3 	    mov	r1, #MAMCR_VALUE
  82 006c 001080E5 	    str r1, [r0, #MAMCR_OFFSET]
  83              	
  84              	    /* MAMTIM = MAMTIM_VALUE */
  85 0070 0410A0E3 	    mov	r1, #MAMTIM_VALUE
  86 0074 041080E5 	    str r1, [r0, #MAMTIM_OFFSET]
  87              	
  88              	/* ----------------------------------------------------------------
  89              	 * LPC21xx stacks setup
  90              	 * ----------------------------------------------------------------
  91              	 */
  92              	stacks_init:
  93 0078 7C009FE5 	    ldr r0, STACK_START
  94              	
  95              	    /* FIQ mode stack */
  96 007c D1F021E3 	    msr CPSR_c, #FIQ_MODE|IRQ_DISABLE|FIQ_DISABLE
  97 0080 00D0A0E1 	    mov sp, r0
  98 0084 800040E2 	    sub r0, r0, #FIQ_STACK_SIZE
  99              	
 100              	    /* IRQ mode stack */
 101 0088 D2F021E3 	    msr CPSR_c, #IRQ_MODE|IRQ_DISABLE|FIQ_DISABLE
 102 008c 00D0A0E1 	    mov sp, r0
 103 0090 800040E2 	    sub r0, r0, #IRQ_STACK_SIZE
 104              	
 105              	    /* Supervisor mode stack */
 106 0094 D3F021E3 	    msr CPSR_c, #SVC_MODE|IRQ_DISABLE|FIQ_DISABLE
 107 0098 00D0A0E1 	    mov sp, r0
 108 009c 800040E2 	    sub r0, r0, #SVC_STACK_SIZE
 109              	
 110              	    /* Undefined mode stack */
 111 00a0 DBF021E3 	    msr CPSR_c, #UND_MODE|IRQ_DISABLE|FIQ_DISABLE
 112 00a4 00D0A0E1 	    mov sp, r0
 113 00a8 100040E2 	    sub r0, r0, #UND_STACK_SIZE
 114              	
ARM GAS  crt.s 			page 3


 115              	    /* Abort mode stack */
 116 00ac D7F021E3 	    msr CPSR_c, #ABT_MODE|IRQ_DISABLE|FIQ_DISABLE
 117 00b0 00D0A0E1 	    mov sp, r0
 118 00b4 100040E2 	    sub r0, r0, #ABT_STACK_SIZE
 119              	
 120              	    /* System mode stack */
 121              	/*    msr CPSR_c, #SYS_MODE|IRQ_DISABLE|FIQ_DISABLE*/
 122 00b8 1FF021E3 	    msr CPSR_c, #SYS_MODE
 123 00bc 00D0A0E1 	    mov sp, r0
 124              	
 125              	    /* Leave the processor in system mode */
 126              	
 127              	/* ----------------------------------------------------------------
 128              	 * C runtime setup
 129              	 * ----------------------------------------------------------------
 130              	 */
 131              	runtime_init:
 132              	    /* Copy .data */
 133 00c0 40009FE5 	    ldr r0, data_source
 134 00c4 40109FE5 	    ldr r1, data_start
 135 00c8 40209FE5 	    ldr r2, data_end
 136              	copy_data:
 137 00cc 020051E1 	    cmp   r1, r2
 138 00d0 04309014 	    ldrne r3, [r0], #4
 139 00d4 04308114 	    strne r3, [r1], #4
 140 00d8 3100001A 	    bne   copy_data
 141              		
 142              	    /* Clear .bss */
 143 00dc 0000A0E3 	    ldr r0, =0
 144 00e0 2C109FE5 	    ldr r1, bss_start
 145 00e4 2C209FE5 	    ldr r2, bss_end
 146              	clear_bss:
 147 00e8 020051E1 	    cmp   r1, r2
 148 00ec 04008114 	    strne r0, [r1], #4
 149 00f0 3800001A 	    bne   clear_bss
 150              	
 151              	    /* Jump to main */
 152 00f4 FEFFFFEB 	    bl  main
 153              	
 154              	/* Catch return from main */
 155 00f8 3C0000EA 	loop:   b   loop
 156              	
 157              	/* ----------------------------------------------------------------
 158              	 * 32-bit constants (and storage)
 159              	 * ----------------------------------------------------------------
 160              	 *
 161              	 * These 32-bit constants are used in ldr statements.
 162              	 */
 163              	
 164              	/* LPC SRAM starts at 0x40000000, and there is 32Kb = 8000h */ 
 165 00fc 00800040 	STACK_START:	.word   0x40008000
 166 0100 80C01FE0 	PLLBASE:        .word   0xE01FC080
 167 0104 00C01FE0 	MAMBASE:        .word   0xE01FC000
 168              	
 169              	/* Linker symbols */
 170 0108 00000000 	data_source:    .word   _etext
 171 010c 00000000 	data_start:     .word   _data
ARM GAS  crt.s 			page 4


 172 0110 00000000 	data_end:       .word   _edata
 173 0114 00000000 	bss_start:      .word   _bss
 174 0118 00000000 	bss_end:        .word   _ebss
 175              	
 176              	/* ----------------------------------------------------------------
 177              	 * 8-bit constants
 178              	 * ----------------------------------------------------------------
 179              	 *
 180              	 * These 8-bit constants are used as immediate values and offsets.
 181              	 */
 182              	
 183              	/* PLL configuration */
 184              	    .equ PLLCON_OFFSET,   0x0
 185              	    .equ PLLCFG_OFFSET,   0x4
 186              	    .equ PLLSTAT_OFFSET,  0x8
 187              	    .equ PLLFEED_OFFSET,  0xC
 188              	
 189              	    .equ PLLCON_PLLE,    (1 << 0)
 190              	    .equ PLLCON_PLLC,    (1 << 1)
 191              	    .equ PLLSTAT_PLOCK,  (1 << 10)
 192              	    .equ PLLFEED1,        0xAA
 193              	    .equ PLLFEED2,        0x55
 194              	
 195              	    .equ PLLCFG_VALUE,    0x24
 196              	
 197              	/* MAM configuration */
 198              	    .equ MAMCR_OFFSET,   0x0
 199              	    .equ MAMTIM_OFFSET,  0x4
 200              	
 201              	    .equ MAMCR_VALUE,    0x2  /* fully enabled */
 202              	    .equ MAMTIM_VALUE,   0x4  /* fetch cycles  */
 203              	
 204              	/* Stack configuration */
 205              	    /* Processor modes (see pA2-11 ARM-ARM) */
 206              	    .equ FIQ_MODE,       0x11
 207              	    .equ IRQ_MODE,       0x12
 208              	    .equ SVC_MODE,       0x13  /* reset mode */
 209              	    .equ ABT_MODE,       0x17
 210              	    .equ UND_MODE,       0x1B
 211              	    .equ SYS_MODE,       0x1F
 212              	
 213              	    /* Stack sizes */
 214              	    .equ FIQ_STACK_SIZE, 0x00000080    /*  32x32-bit words */
 215              	    .equ IRQ_STACK_SIZE, 0x00000080
 216              	    .equ SVC_STACK_SIZE, 0x00000080
 217              	    .equ ABT_STACK_SIZE, 0x00000010    /*   4x32-bit words */
 218              	    .equ UND_STACK_SIZE, 0x00000010
 219              	    .equ SYS_STACK_SIZE, 0x00000400    /* 256x32-bit words */
 220              	
 221              	    /* CPSR interrupt disable bits */
 222              	    .equ IRQ_DISABLE,    (1 << 7)
 223              	    .equ FIQ_DISABLE,    (1 << 6)
 224              	
 225              	    .end
ARM GAS  crt.s 			page 5


DEFINED SYMBOLS
               crt.s:23     .text:00000000 _start
               crt.s:17     .text:00000000 $a
               crt.s:40     .text:00000024 reset
               crt.s:155    .text:000000f8 loop
               crt.s:34     .text:00000020 fiq_addr
               crt.s:34     .text:00000020 $d
               crt.s:42     .text:00000024 $a
               crt.s:166    .text:00000100 PLLBASE
                            *ABS*:00000024 PLLCFG_VALUE
                            *ABS*:00000004 PLLCFG_OFFSET
                            *ABS*:00000001 PLLCON_PLLE
                            *ABS*:00000000 PLLCON_OFFSET
                            *ABS*:000000aa PLLFEED1
                            *ABS*:00000055 PLLFEED2
                            *ABS*:0000000c PLLFEED_OFFSET
               crt.s:59     .text:00000048 pll_loop
                            *ABS*:00000008 PLLSTAT_OFFSET
                            *ABS*:00000400 PLLSTAT_PLOCK
                            *ABS*:00000002 PLLCON_PLLC
               crt.s:76     .text:00000064 mam_init
               crt.s:167    .text:00000104 MAMBASE
                            *ABS*:00000002 MAMCR_VALUE
                            *ABS*:00000000 MAMCR_OFFSET
                            *ABS*:00000004 MAMTIM_VALUE
                            *ABS*:00000004 MAMTIM_OFFSET
               crt.s:92     .text:00000078 stacks_init
               crt.s:165    .text:000000fc STACK_START
                            *ABS*:00000011 FIQ_MODE
                            *ABS*:00000080 IRQ_DISABLE
                            *ABS*:00000040 FIQ_DISABLE
                            *ABS*:00000080 FIQ_STACK_SIZE
                            *ABS*:00000012 IRQ_MODE
                            *ABS*:00000080 IRQ_STACK_SIZE
                            *ABS*:00000013 SVC_MODE
                            *ABS*:00000080 SVC_STACK_SIZE
                            *ABS*:0000001b UND_MODE
                            *ABS*:00000010 UND_STACK_SIZE
                            *ABS*:00000017 ABT_MODE
                            *ABS*:00000010 ABT_STACK_SIZE
                            *ABS*:0000001f SYS_MODE
               crt.s:131    .text:000000c0 runtime_init
               crt.s:170    .text:00000108 data_source
               crt.s:171    .text:0000010c data_start
               crt.s:172    .text:00000110 data_end
               crt.s:136    .text:000000cc copy_data
               crt.s:173    .text:00000114 bss_start
               crt.s:174    .text:00000118 bss_end
               crt.s:146    .text:000000e8 clear_bss
               crt.s:165    .text:000000fc $d
               crt.s:219    *ABS*:00000400 SYS_STACK_SIZE

UNDEFINED SYMBOLS
main
_etext
_data
_edata
ARM GAS  crt.s 			page 6


_bss
_ebss
fiq_handler
